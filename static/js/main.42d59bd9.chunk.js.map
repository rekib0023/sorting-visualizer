{"version":3,"sources":["SortingAlgorithms/SortingAlgorithms.js","SortingVisualizer/SortingVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","push","doMerge","getQuickSortAnimations","quicksortHelper","low","high","pivot","swap","partition","items","leftIndex","rightIndex","temp","SortingVisualizer","props","state","this","resetArray","randomIntFromInterval","setState","arrayBars","document","getElementsByClassName","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newHeight","height","bubbleSortHelper","getBubbleSortAnimations","newHeight1","newHeight2","selectionSortHelper","getSelectionSortAnimations","insertionSortHelper","getInsertionSortAnimations","console","log","javaScriptSortedArray","sort","a","b","bubbleSortedArray","arraysAreEqual","className","id","onClick","bubbleSort","selectionSort","insertionSort","mergeSort","quickSort","testSortingAlgorithms","map","value","idx","key","width","src","React","Component","min","max","random","arrayOne","arrayTwo","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.42d59bd9.chunk.js","sourcesContent":["export function getMergeSortAnimations(array) {\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    const auxiliaryArray = array.slice();\r\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n    return animations;\r\n}\r\n\r\nexport function getQuickSortAnimations(array) {\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    quicksortHelper(array, 0, array.length - 1, animations);\r\n    return array;\r\n}\r\n\r\nexport function getBubbleSortAnimations(array) {\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    bubbleSortHelper(array, animations);\r\n    return animations;\r\n}\r\n\r\nexport function getSelectionSortAnimations(array) {\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    selectionSortHelper(array, animations);\r\n    return animations;\r\n}\r\n\r\nexport function getInsertionSortAnimations(array) {\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    insertionSortHelper(array, animations);\r\n    return animations;\r\n}\r\n\r\nfunction mergeSortHelper(\r\n    mainArray,\r\n    startIdx,\r\n    endIdx,\r\n    auxiliaryArray,\r\n    animations\r\n) {\r\n    if (startIdx === endIdx) return;\r\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n    mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\r\n    mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\r\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\r\n}\r\n\r\nfunction doMerge(\r\n    mainArray,\r\n    startIdx,\r\n    middleIdx,\r\n    endIdx,\r\n    auxiliaryArray,\r\n    animations\r\n) {\r\n    let k = startIdx;\r\n    let i = startIdx;\r\n    let j = middleIdx + 1;\r\n    while (i <= middleIdx && j <= endIdx) {\r\n        // These are the values that we're comparing; we push them once\r\n        // to change their color.\r\n        animations.push([i, j]);\r\n        // These are the values that we're comparing; we push them a second\r\n        // time to revert their color.\r\n        animations.push([i, j]);\r\n        if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n            // We overwrite the value at index k in the original array with the\r\n            // value at index i in the auxiliary array.\r\n            animations.push([k, auxiliaryArray[i]]);\r\n            mainArray[k++] = auxiliaryArray[i++];\r\n        } else {\r\n            // We overwrite the value at index k in the original array with the\r\n            // value at index j in the auxiliary array.\r\n            animations.push([k, auxiliaryArray[j]]);\r\n            mainArray[k++] = auxiliaryArray[j++];\r\n        }\r\n    }\r\n    while (i <= middleIdx) {\r\n        // These are the values that we're comparing; we push them once\r\n        // to change their color.\r\n        animations.push([i, i]);\r\n        // These are the values that we're comparing; we push them a second\r\n        // time to revert their color.\r\n        animations.push([i, i]);\r\n        // We overwrite the value at index k in the original array with the\r\n        // value at index i in the auxiliary array.\r\n        animations.push([k, auxiliaryArray[i]]);\r\n        mainArray[k++] = auxiliaryArray[i++];\r\n    }\r\n    while (j <= endIdx) {\r\n        // These are the values that we're comparing; we push them once\r\n        // to change their color.\r\n        animations.push([j, j]);\r\n        // These are the values that we're comparing; we push them a second\r\n        // time to revert their color.\r\n        animations.push([j, j]);\r\n        // We overwrite the value at index k in the original array with the\r\n        // value at index j in the auxiliary array.\r\n        animations.push([k, auxiliaryArray[j]]);\r\n        mainArray[k++] = auxiliaryArray[j++];\r\n    }\r\n}\r\n\r\nfunction bubbleSortHelper(array, animations) {\r\n    let temp;\r\n    for (let i = 0; i < array.length - 1; i++) {\r\n        for (let j = 0; j < array.length - i - 1; j++) {\r\n            // These are the values that we're comparing; we push them once\r\n            // to change their color. \r\n            animations.push([j, j + 1]);\r\n            // sortedElems.push(['x']);\r\n            // These are the values that we're comparing; we push them a second\r\n            // time to revert their color.\r\n            animations.push([j, j + 1]);\r\n            // sortedElems.push(['x']);\r\n            if (array[j] > array[j + 1]) {\r\n                // We swap the value along with the indices at index i in the array \r\n                // with the value at j in the array\r\n                animations.push([\r\n                    [j, j + 1],\r\n                    [array[j], array[j + 1]]\r\n                ]);\r\n                // sortedElems.push(['x']);\r\n                // swapping of the value is done in the array\r\n                temp = array[j];\r\n                array[j] = array[j + 1];\r\n                array[j + 1] = temp;\r\n            } else {\r\n                // when we don't need any swapping to do\r\n                animations.push([\r\n                    [0, 0],\r\n                    [0, 0]\r\n                ]);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction selectionSortHelper(array, animations) {\r\n    let temp;\r\n    for (let i = 0; i < array.length - 1; i++) {\r\n        for (let j = i + 1; j < array.length; j++) {\r\n            // These are the values that we're comparing; we push them once\r\n            // to change their color. \r\n            animations.push([i, j]);\r\n            // These are the values that we're comparing; we push them a second\r\n            // time to revert their color.\r\n            animations.push([i, j]);\r\n            if (array[i] > array[j]) {\r\n                // We swap the value along with the indices at index i in the array \r\n                // with the value at j in the array\r\n                animations.push([\r\n                    [i, j],\r\n                    [array[i], array[j]]\r\n                ]);\r\n                // swapping of the value is done in the array\r\n                temp = array[i];\r\n                array[i] = array[j];\r\n                array[j] = temp;\r\n            } else {\r\n                // when we don't need any swapping to do\r\n                animations.push([\r\n                    [0, 0],\r\n                    [0, 0]\r\n                ]);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction insertionSortHelper(array, animations) {\r\n    let temp;\r\n    for (let i = 0; i < array.length - 1; i++) {\r\n        for (let j = i + 1; j > 0; j--) {\r\n            // These are the values that we're comparing; we push them once\r\n            // to change their color. \r\n            animations.push([j, j - 1]);\r\n            // These are the values that we're comparing; we push them a second\r\n            // time to revert their color.\r\n            animations.push([j, j - 1]);\r\n            if (array[j] < array[j - 1]) {\r\n                // We swap the value along with the indices at index i in the array \r\n                // with the value at j in the array\r\n                animations.push([\r\n                    [j, j - 1],\r\n                    [array[j], array[j - 1]]\r\n                ]);\r\n                // swapping of the value is done in the array\r\n                temp = array[j];\r\n                array[j] = array[j - 1];\r\n                array[j - 1] = temp;\r\n            } else {\r\n                // when we don't need any swapping to do\r\n                animations.push([\r\n                    [0, 0],\r\n                    [0, 0]\r\n                ]);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction swap(items, leftIndex, rightIndex) {\r\n    var temp = items[leftIndex];\r\n    items[leftIndex] = items[rightIndex];\r\n    items[rightIndex] = temp;\r\n}\r\n\r\nfunction partition(array, low, high, animations) {\r\n    var pivot = array[high];\r\n    var i = (low - 1);\r\n\r\n    for (let j = low; j <= high - 1; j++) {\r\n        animations.push([j, high]);\r\n        animations.push([j, high]);\r\n        if (array[j] < pivot) {\r\n            i++;\r\n            animations.push([i, j])\r\n            swap(array, i, j);\r\n        } else {\r\n            animations.push([0, 0]);\r\n        }\r\n    }\r\n    animations.push([1, 1]);\r\n    animations.push([i + 1, high]);\r\n    swap(array, i + 1, high)\r\n    return (i + 1);\r\n}\r\n\r\nfunction quicksortHelper(array, low, high, animations) {\r\n    if (low < high) {\r\n        var pivot = partition(array, low, high, animations);\r\n        quicksortHelper(array, low, pivot - 1, animations);\r\n        quicksortHelper(array, pivot + 1, high, animations);\r\n    }\r\n}","import React from \"react\";\r\nimport { getMergeSortAnimations } from \"../SortingAlgorithms/SortingAlgorithms.js\";\r\nimport \"./SortingVisualizer.css\";\r\nimport \"./main.js\"\r\nimport { getBubbleSortAnimations } from \"../SortingAlgorithms/SortingAlgorithms.js\";\r\nimport { getSelectionSortAnimations } from \"../SortingAlgorithms/SortingAlgorithms.js\";\r\nimport { getInsertionSortAnimations } from \"../SortingAlgorithms/SortingAlgorithms.js\";\r\nimport { getQuickSortAnimations } from \"../SortingAlgorithms/SortingAlgorithms.js\";\r\n// import {quicksortHelper } from \"../SortingAlgorithms/SortingAlgorithms.js\";\r\n\r\n// Change this value for the speed of the animations.\r\nconst ANIMATION_SPEED_MS = 1;\r\n\r\n// Change this value for the width of bars \r\nconst WIDTH_OF_BARS = 5;\r\n\r\n// Change this value for the number of bars (value) in the array.\r\nconst NUMBER_OF_ARRAY_BARS = 180;\r\n\r\n// This is the main color of the array bars.\r\nconst PRIMARY_COLOR = \"turquoise\";\r\n\r\n// This is the color of array bars that are being compared throughout the animations.\r\nconst SECONDARY_COLOR = \"red\";\r\n\r\nexport default class SortingVisualizer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            array: []\r\n        };\r\n    }\r\n    componentDidMount() {\r\n        this.resetArray();\r\n    }\r\n\r\n    resetArray() {\r\n        const array = [];\r\n        for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\r\n            array.push(randomIntFromInterval(5, 550));\r\n        }\r\n        this.setState({ array });\r\n    }\r\n\r\n    // Merge Sort Animation\r\n    mergeSort() {\r\n        const animations = getMergeSortAnimations(this.state.array);\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n            const isColorChange = i % 3 !== 2;\r\n            if (isColorChange) {\r\n                const [barOneIdx, barTwoIdx] = animations[i];\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                const barTwoStyle = arrayBars[barTwoIdx].style;\r\n                const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = color;\r\n                    barTwoStyle.backgroundColor = color;\r\n                }, i * ANIMATION_SPEED_MS);\r\n            } else {\r\n                setTimeout(() => {\r\n                    const [barOneIdx, newHeight] = animations[i];\r\n                    const barOneStyle = arrayBars[barOneIdx].style;\r\n                    barOneStyle.height = `${newHeight}px`;\r\n                    // barOneStyle.backgroundColor = 'black';\r\n                }, i * ANIMATION_SPEED_MS);\r\n            }\r\n        }\r\n    }\r\n\r\n    // Bubble Sort Animation\r\n    bubbleSort() {\r\n        const animations = getBubbleSortAnimations(this.state.array);\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n            const isColorChange = i % 3 !== 2;\r\n            if (isColorChange) {\r\n                const [barOneIdx, barTwoIdx] = animations[i];\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                const barTwoStyle = arrayBars[barTwoIdx].style;\r\n                const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = color;\r\n                    barTwoStyle.backgroundColor = color;\r\n                }, i * ANIMATION_SPEED_MS);\r\n            } else {\r\n                setTimeout(() => {\r\n                    const [[barOneIdx, barTwoIdx], [newHeight1, newHeight2]] = animations[i];\r\n                    if (newHeight1 !== 0) {\r\n                        const barOneStyle = arrayBars[barOneIdx].style;\r\n                        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n                        barOneStyle.height = `${newHeight2}px`;\r\n                        barTwoStyle.height = `${newHeight1}px`;\r\n                        // barOneStyle.backgroundColor = 'green';\r\n                    }\r\n                }, i * ANIMATION_SPEED_MS);\r\n            }\r\n        }\r\n    }\r\n\r\n    // Selection Sort Animation\r\n    selectionSort() {\r\n        const animations = getSelectionSortAnimations(this.state.array);\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n            const isColorChange = i % 3 !== 2;\r\n\r\n            if (isColorChange) {\r\n                const [barOneIdx, barTwoIdx] = animations[i];\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                const barTwoStyle = arrayBars[barTwoIdx].style;\r\n                const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = color;\r\n                    barTwoStyle.backgroundColor = color;\r\n                }, i * ANIMATION_SPEED_MS);\r\n            } else {\r\n                setTimeout(() => {\r\n                    const [[barOneIdx, barTwoIdx], [newHeight1, newHeight2]] = animations[\r\n                        i\r\n                    ];\r\n                    if (newHeight1 !== 0) {\r\n                        const barOneStyle = arrayBars[barOneIdx].style;\r\n                        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n                        barOneStyle.height = `${newHeight2}px`;\r\n                        barTwoStyle.height = `${newHeight1}px`;\r\n                    }\r\n                }, i * ANIMATION_SPEED_MS);\r\n            }\r\n        }\r\n    }\r\n\r\n    // Insertion Sort Animation\r\n    insertionSort() {\r\n        const animations = getInsertionSortAnimations(this.state.array);\r\n        console.log(animations);\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n            const isColorChange = i % 3 !== 2;\r\n\r\n            if (isColorChange) {\r\n                const [barOneIdx, barTwoIdx] = animations[i];\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                const barTwoStyle = arrayBars[barTwoIdx].style;\r\n                const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = color;\r\n                    barTwoStyle.backgroundColor = color;\r\n                }, i * ANIMATION_SPEED_MS);\r\n            } else {\r\n                setTimeout(() => {\r\n                    const [[barOneIdx, barTwoIdx], [newHeight1, newHeight2]] = animations[\r\n                        i\r\n                    ];\r\n                    if (newHeight1 !== 0) {\r\n                        const barOneStyle = arrayBars[barOneIdx].style;\r\n                        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n                        barOneStyle.height = `${newHeight2}px`;\r\n                        barTwoStyle.height = `${newHeight1}px`;\r\n                    }\r\n                }, i * ANIMATION_SPEED_MS);\r\n            }\r\n        }\r\n    }\r\n\r\n    quickSort() {\r\n    }\r\n\r\n    // NOTE: This method will only work if your sorting algorithms actually return\r\n    // the sorted arrays; if they return the animations (as they currently do), then\r\n    // this method will be broken.\r\n    testSortingAlgorithms() {\r\n        for (let i = 0; i < 100; i++) {\r\n            const array = [];\r\n            const length = randomIntFromInterval(1, 1000);\r\n            for (let i = 0; i < length; i++) {\r\n                array.push(randomIntFromInterval(-1000, 1000));\r\n            }\r\n            const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\r\n            const bubbleSortedArray = getQuickSortAnimations(array.slice(), 0, array.length - 1);\r\n            console.log(arraysAreEqual(javaScriptSortedArray, bubbleSortedArray));\r\n            // console.log(bubbleSortedArray)\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { array } = this.state;\r\n\r\n        return (\r\n            <div className=\"visuzalier-container\">\r\n                <h1 id=\"xyz\">\r\n                    Sorting Visualizer\r\n                </h1>\r\n                <div className=\"nav-bar\">\r\n                    <button className=\"generate-array-btn\" onClick={() => this.resetArray()}>Generate New Array</button>\r\n                    {/* <div className=\"slide-container\">\r\n                        <input type=\"range\" min=\"10\" max=\"180\" id=\"array-range\" className=\"slider\" />\r\n                        <p className=\"range-value\">Value: <span id=\"value\"></span></p>\r\n                    </div> */}\r\n                    <div className=\"sorting-algos-btn\">\r\n                        <button className=\"algo-btn\" onClick={() => this.bubbleSort()}>Bubble Sort</button>\r\n                        <button className=\"algo-btn\" onClick={() => this.selectionSort()}>Selection Sort</button>\r\n                    <button className=\"algo-btn\" onClick={() => this.insertionSort()}>Insertion Sort</button>\r\n                    <button className=\"algo-btn\" onClick={() => this.mergeSort()}>Merge Sort</button>\r\n                    <button className=\"algo-btn\" onClick={() => this.quickSort()}>Quick Sort (INCOMPLETE)</button>\r\n                    <button className=\"algo-btn\" onClick={() => this.testSortingAlgorithms()}>Test Sorting Algorithms (BROKEN)</button>\r\n                    </div>\r\n                    <button className=\"sort\">Sort!</button>\r\n                </div>\r\n                <div className=\"array-container\">\r\n                    {array.map((value, idx) => (\r\n                        <div\r\n                            className=\"array-bar\"\r\n                            key={idx}\r\n                            style={{ height: `${value}px`, width: `${WIDTH_OF_BARS}px` }}\r\n                        ></div>\r\n                    ))}\r\n                </div>\r\n                <script src=\"./main.js\"></script>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction randomIntFromInterval(min, max) {\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\nfunction arraysAreEqual(arrayOne, arrayTwo) {\r\n    if (arrayOne.length !== arrayTwo.length) return false;\r\n    for (let i = 0; i < arrayOne.length; i++) {\r\n        if (arrayOne[i] !== arrayTwo[i]) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n","import React from 'react';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer></SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}